{
  "openapi": "3.0.1",
  "info": {
    "title": "Pixeon Application",
    "description": "",
    "termsOfService": "",
    "contact": {
      "email": "marcosricardo@gmail.com"
    },
    "license": {
      "name": "Software propriet√°rio"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "description": "URL relative to the API application",
      "url": "/api/v1.0"
    },
    {
      "description": "URL absolute to the production API server",
      "url": "http://pixeon.localhost/api/v1.0"
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": ""
    },
    {
      "name": "auth",
      "description": ""
    },
    {
      "name": "physicians",
      "description": ""
    },
    {
      "name": "patients",
      "description": ""
    },
    {
      "name": "orders",
      "description": ""
    },
    {
      "name": "exams",
      "description": ""
    },
    {
      "name": "database",
      "description": ""
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get the list of all registered users",
        "security": [
          {
            "jwt": [
              "secret"
            ]
          }
        ],
        "operationId": "getUsers",
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "The number of items to skip before starting to collect the result set"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of items to return"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at"
              ]
            },
            "description": "The value used to sort the items"
          },
          {
            "in": "query",
            "name": "desc",
            "schema": {
              "type": "string",
              "enum": [
                "1"
              ]
            },
            "description": "Indicates the order sort"
          }
        ],
        "responses": {
          "200": {
            "description": "operation performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/Metadata"
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserFull"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing Authorization Header",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP401Response"
                }
              }
            }
          },
          "404": {
            "description": "not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP404Response"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Add a new user",
        "security": [
          {
            "jwt": [
              "secret"
            ]
          }
        ],
        "operationId": "addUser",
        "requestBody": {
          "description": "User data to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "operation performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFull"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP400Response"
                },
                "examples": {
                  "Bad Request": {
                    "value": {
                      "status": "error",
                      "message": "Bad request"
                    }
                  },
                  "Invalid Input": {
                    "value": {
                      "status": "error",
                      "code": 1,
                      "message": "Invalid input",
                      "erros": [
                        {
                          "message": "'username' is a required property",
                          "property": "",
                          "validator": "required"
                        },
                        {
                          "message": "'password' is a required property",
                          "property": "",
                          "validator": "required",
                          "validator_value": [
                            "username",
                            "passwor"
                          ]
                        }
                      ]
                    }
                  },
                  "Username already used": {
                    "value": {
                      "status": "error",
                      "code": 101,
                      "message": "The username is already being used"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing Authorization Header",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP401Response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Retrieves a user specified by ID",
        "description": "Returns a user's JSON object",
        "security": [
          {
            "jwt": [
              "secret"
            ]
          }
        ],
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID to be retrieved",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "operation performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFull"
                }
              }
            }
          },
          "401": {
            "description": "Missing Authorization Header",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP401Response"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP404Response"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates a user specified by ID",
        "security": [
          {
            "jwt": [
              "secret"
            ]
          }
        ],
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID to be updated",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "operation performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFull"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP400Response"
                },
                "examples": {
                  "Bad Request": {
                    "value": {
                      "status": "error",
                      "message": "Bad request"
                    }
                  },
                  "Invalid Input": {
                    "value": {
                      "status": "error",
                      "code": 1,
                      "message": "Invalid input",
                      "erros": [
                        {
                          "message": "'username' is a required property",
                          "property": "",
                          "validator": "required"
                        },
                        {
                          "message": "'password' is a required property",
                          "property": "",
                          "validator": "required",
                          "validator_value": [
                            "username",
                            "passwor"
                          ]
                        }
                      ]
                    }
                  },
                  "Username ialready used": {
                    "value": {
                      "status": "error",
                      "code": 101,
                      "message": "The username is already being used"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing Authorization Header",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP401Response"
                }
              }
            }
          },
          "404": {
            "description": "not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP404Response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a user specified by ID",
        "security": [
          {
            "jwt": [
              "secret"
            ]
          }
        ],
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID to be deleted",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          }
        ],
        "responses": {
          "204": {
            "description": "operation performed successfully"
          },
          "401": {
            "description": "Missing Authorization Header",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP401Response"
                }
              }
            }
          },
          "404": {
            "description": "not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP404Response"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Gets access tokens for the user",
        "operationId": "login",
        "requestBody": {
          "description": "JSON object with user's username and password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "operation performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tokens": {
                      "type": "object",
                      "properties": {
                        "access": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                        },
                        "refresh": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing Authorization Header",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Login error. Invalid username or password."
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Gets an access token using the refresh token",
        "security": [
          {
            "jwt_refresh": [
              "secret"
            ]
          }
        ],
        "operationId": "refresh",
        "responses": {
          "200": {
            "description": "operation performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tokens": {
                      "type": "object",
                      "properties": {
                        "access": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing Authorization Header",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP401Response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/physician": {
      "get": {
        "tags": [
          "physicians"
        ],
        "summary": "Get the list of all registered physicians",
        "security": [
          {
            "jwt": [
              "secret"
            ]
          }
        ],
        "operationId": "getPhysicians",
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "The number of items to skip before starting to collect the result set"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of items to return"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at"
              ]
            },
            "description": "The value used to sort the items"
          },
          {
            "in": "query",
            "name": "desc",
            "schema": {
              "type": "string",
              "enum": [
                "1"
              ]
            },
            "description": "Indicates the order sort"
          }
        ],
        "responses": {
          "200": {
            "description": "operation performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/Metadata"
                    },
                    "physicians": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PhysicianFull"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing Authorization Header",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP401Response"
                }
              }
            }
          },
          "404": {
            "description": "not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP404Response"
                }
              }
            }
          }
        }
      }
    },
    "/patient": {
      "get": {
        "tags": [
          "patients"
        ],
        "summary": "Get the list of all registered patients",
        "security": [
          {
            "jwt": [
              "secret"
            ]
          }
        ],
        "operationId": "getPatients",
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "The number of items to skip before starting to collect the result set"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of items to return"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at"
              ]
            },
            "description": "The value used to sort the items"
          },
          {
            "in": "query",
            "name": "desc",
            "schema": {
              "type": "string",
              "enum": [
                "1"
              ]
            },
            "description": "Indicates the order sort"
          }
        ],
        "responses": {
          "200": {
            "description": "operation performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/Metadata"
                    },
                    "patients": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PatientFull"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing Authorization Header",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP401Response"
                }
              }
            }
          },
          "404": {
            "description": "not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP404Response"
                }
              }
            }
          }
        }
      }
    },
    "/order": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get the list of registered orders",
        "security": [
          {
            "jwt": [
              "secret"
            ]
          }
        ],
        "operationId": "getOrder",
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "The number of items to skip before starting to collect the result set"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of items to return"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at"
              ]
            },
            "description": "The value used to sort the items"
          },
          {
            "in": "query",
            "name": "desc",
            "schema": {
              "type": "string",
              "enum": [
                "1"
              ]
            },
            "description": "Indicates the order sort"
          },
          {
            "in": "query",
            "name": "from_time",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The initial data-time of the time range of the orders to be selected"
          },
          {
            "in": "query",
            "name": "to_time",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The final data-time of the time range of the orders to be selected."
          }
        ],
        "responses": {
          "200": {
            "description": "operation performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/Metadata"
                    },
                    "orders": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrderFull"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing Authorization Header",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP401Response"
                }
              }
            }
          },
          "404": {
            "description": "not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP404Response"
                }
              }
            }
          }
        }
      }
    },
    "/exam": {
      "get": {
        "tags": [
          "exams"
        ],
        "summary": "Get the list of registered exams",
        "security": [
          {
            "jwt": [
              "secret"
            ]
          }
        ],
        "operationId": "getExams",
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "The number of items to skip before starting to collect the result set"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of items to return"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at"
              ]
            },
            "description": "The value used to sort the items"
          },
          {
            "in": "query",
            "name": "desc",
            "schema": {
              "type": "string",
              "enum": [
                "1"
              ]
            },
            "description": "Indicates the order sort"
          },
          {
            "in": "query",
            "name": "patient_id",
            "schema": {
              "type": "string"
            },
            "description": "The public id of the patient who wants to see the exams"
          },
          {
            "in": "query",
            "name": "physician_id",
            "schema": {
              "type": "string"
            },
            "description": "The public id of the physician who wants to see the exams"
          },
          {
            "in": "query",
            "name": "bmi",
            "schema": {
              "type": "string",
              "enum": [
                "not normal"
              ]
            },
            "description": "Selected exames according to the patient's BMI"
          }
        ],
        "responses": {
          "200": {
            "description": "operation performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "metadata": {
                      "$ref": "#/components/schemas/Metadata"
                    },
                    "exams": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ExamFull"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing Authorization Header",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP401Response"
                }
              }
            }
          },
          "404": {
            "description": "not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP404Response"
                }
              }
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "tags": [
          "database"
        ],
        "summary": "Get the list of registered exams",
        "security": [
          {
            "jwt": [
              "secret"
            ]
          }
        ],
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "operation performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "down"
                    },
                    "msg": {
                      "type": "string",
                      "example": "The database is DOWN!"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Missing Authorization Header",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTP401Response"
                }
              }
            }
          },
          "503": {
            "description": "Missing Authorization Header",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "down"
                    },
                    "msg": {
                      "type": "string",
                      "example": "The database is DOWN!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "maxLength": 50
          },
          "password": {
            "type": "string",
            "maxLength": 256
          }
        }
      },
      "UserFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          },
          {
            "type": "object",
            "properties": {
              "public_id": {
                "type": "string",
                "example": "1b0e89c6a93611ebbd620242ac150005"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "Physician": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 250
          }
        }
      },
      "PhysicianFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Physician"
          },
          {
            "type": "object",
            "properties": {
              "public_id": {
                "type": "string",
                "example": "1b0e89c6a93611ebbd620242ac150005"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "Patient": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 250
          }
        }
      },
      "PatientFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Patient"
          },
          {
            "type": "object",
            "properties": {
              "public_id": {
                "type": "string",
                "example": "1b0e89c6a93611ebbd620242ac150005"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "Order": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 250
          }
        }
      },
      "OrderFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Order"
          },
          {
            "type": "object",
            "properties": {
              "public_id": {
                "type": "string",
                "example": "1b0e89c6a93611ebbd620242ac150005"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "Exam": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 250
          }
        }
      },
      "ExamFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Exam"
          },
          {
            "type": "object",
            "properties": {
              "public_id": {
                "type": "string",
                "example": "1b0e89c6a93611ebbd620242ac150005"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "offset": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "HTTP400Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "enum": [
              "error",
              "fail"
            ]
          },
          "message": {
            "type": "string",
            "example": "Bad request"
          }
        }
      },
      "HTTP401Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "enum": [
              "error",
              "fail"
            ]
          },
          "message": {
            "type": "string",
            "example": "Missing authorization header"
          }
        }
      },
      "HTTP404Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "enum": [
              "error",
              "fail"
            ]
          },
          "message": {
            "type": "string",
            "example": "Not found"
          }
        }
      },
      "HTTP405Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "enum": [
              "error",
              "fail"
            ]
          },
          "message": {
            "type": "string",
            "example": "Method not allowed"
          }
        }
      },
      "HTTP409Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "enum": [
              "error",
              "fail"
            ]
          },
          "message": {
            "type": "string",
            "example": "State conflict"
          }
        }
      },
      "HTTP500Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "fail",
            "enum": [
              "error",
              "fail"
            ]
          },
          "message": {
            "type": "string",
            "example": "Internal server error"
          }
        }
      }
    },
    "securitySchemes": {
      "jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "jwt_refresh": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}